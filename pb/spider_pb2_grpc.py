# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pb import spider_pb2 as spider__pb2


class SpiderServiceStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCNBingWallPaper = channel.unary_unary(
                '/proto.SpiderService/GetCNBingWallPaper',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.GetUSBingWallPaper = channel.unary_unary(
                '/proto.SpiderService/GetUSBingWallPaper',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.WeiboHot = channel.unary_unary(
                '/proto.SpiderService/WeiboHot',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.D36KrHot = channel.unary_unary(
                '/proto.SpiderService/D36KrHot',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.WallStreetNews = channel.unary_unary(
                '/proto.SpiderService/WallStreetNews',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.ZhihuHot = channel.unary_unary(
                '/proto.SpiderService/ZhihuHot',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.OdailyFeeds = channel.unary_unary(
                '/proto.SpiderService/OdailyFeeds',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.AskCopilot = channel.unary_unary(
                '/proto.SpiderService/AskCopilot',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )
        self.CaiXinNews = channel.unary_unary(
                '/proto.SpiderService/CaiXinNews',
                request_serializer=spider__pb2.SpiderReq.SerializeToString,
                response_deserializer=spider__pb2.SpiderResp.FromString,
                )


class SpiderServiceServicer(object):
    """The greeting service definition.
    """

    def GetCNBingWallPaper(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUSBingWallPaper(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WeiboHot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def D36KrHot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WallStreetNews(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZhihuHot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OdailyFeeds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AskCopilot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CaiXinNews(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SpiderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCNBingWallPaper': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCNBingWallPaper,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'GetUSBingWallPaper': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUSBingWallPaper,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'WeiboHot': grpc.unary_unary_rpc_method_handler(
                    servicer.WeiboHot,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'D36KrHot': grpc.unary_unary_rpc_method_handler(
                    servicer.D36KrHot,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'WallStreetNews': grpc.unary_unary_rpc_method_handler(
                    servicer.WallStreetNews,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'ZhihuHot': grpc.unary_unary_rpc_method_handler(
                    servicer.ZhihuHot,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'OdailyFeeds': grpc.unary_unary_rpc_method_handler(
                    servicer.OdailyFeeds,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'AskCopilot': grpc.unary_unary_rpc_method_handler(
                    servicer.AskCopilot,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
            'CaiXinNews': grpc.unary_unary_rpc_method_handler(
                    servicer.CaiXinNews,
                    request_deserializer=spider__pb2.SpiderReq.FromString,
                    response_serializer=spider__pb2.SpiderResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.SpiderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SpiderService(object):
    """The greeting service definition.
    """

    @staticmethod
    def GetCNBingWallPaper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/GetCNBingWallPaper',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUSBingWallPaper(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/GetUSBingWallPaper',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WeiboHot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/WeiboHot',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def D36KrHot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/D36KrHot',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WallStreetNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/WallStreetNews',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZhihuHot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/ZhihuHot',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OdailyFeeds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/OdailyFeeds',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AskCopilot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/AskCopilot',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CaiXinNews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.SpiderService/CaiXinNews',
            spider__pb2.SpiderReq.SerializeToString,
            spider__pb2.SpiderResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
